<?php defined('SYSPATH') or die('No direct script access.');class Uploader {		const directory = "media/uploads";	const MAX_FILE_SIZE = 2097152; // 2MB	const MAX_NUM_FILES = 10; // Maxima cantidad de archivos		const ALL = 0;	const ONLY_IMAGES = 1;	const ONLY_DOCS = 2;		static function form_open($action, $attributes = array() )	{		if( !is_array($attributes) )			$attributes = array();				$attributes['enctype'] = 'multipart/form-data';					return Form::open($action, $attributes);	}	/***	 * Check if $_FILE has $file_keyname	 * 	 * @return boolean	 */	static function exist_file($file_keyname)	{		if( isset($_FILES) && count($_FILES) > 0 && isset( $_FILES[ $file_keyname ] ) )			return true;					return false;	}		static function exist_file_array($file_keyname)	{		if( isset($_FILES) &&			isset( $_FILES[$file_keyname] ) &&			count($_FILES[$file_keyname]["name"]) > 0 &&			!self::is_empty_array($file_keyname)		)			return true;				return false;	}		private static function is_empty_array($file_keyname)	{		$errors = $_FILES[$file_keyname]["error"];		foreach($errors as $v)		{			if($v != UPLOAD_ERR_NO_FILE)				return false;		}				return true;			}		static function save_to_subfolder($file_keyname, $subfolder = '')	{		return self::save($file_keyname, self::get_date_string($subfolder));	}		static function save($file_keyname, $subdir = '', $save_as = NULL)	{				if( self::exist_file($file_keyname) )		{			$sd = self::directory . (strlen($subdir) > 0 ? '/' : '' ) . $subdir;			@mkdir($sd, 0766, true);						// Validamos para saber si se subio el archivo correctamente			$path = Upload::save( $_FILES[ $file_keyname ], $save_as, $sd );			if($path)				return str_replace(DOCROOT, '/', $path);					}		return false;	}		static function save_items_to_subfolder($file_keyname, $subfolder, $upload_config)	{				$items = $_FILES[$file_keyname];				if( $upload_config["MIN_NUM_FILES"] > count($items["name"]) ||			$upload_config["MAX_NUM_FILES"] < count($items["name"])		)			return false;				$subdir = self::get_date_string($subfolder);				$sd = self::directory . (strlen($subdir) > 0 ? '/' : '' ) . $subdir;		@mkdir($sd, 0766, true);		$image_urls = array();					foreach($items["name"] as $k => $name)		{			// Para permitir inputs en blanco			if( $items["error"][$k] == UPLOAD_ERR_NO_FILE )				continue;						if( $items["error"][$k] == UPLOAD_ERR_OK && $items["size"][$k] <= self::MAX_FILE_SIZE &&			   self::is_allowed_type($items["type"][$k], $upload_config["ALLOWED_TYPES"])			)			{				$tmp_name = $items["tmp_name"][$k];                $name = uniqid().$name;				$path = $sd.$name;				move_uploaded_file($tmp_name, $path);				array_push($image_urls, "/".$path);			}			else			{				return false;			}		}		return $image_urls;			}		static private function is_allowed_type($type, $format_type)	{		switch($format_type) {			case self::ALL:				if ($type == "image/gif" || $type == "image/jpeg" || $type == "image/pjpeg" ||					$type == "image/png" || $type == "image/x-png" || $type == "application/pdf" ||					$type == "application/msword")					return true;								break;						case self::ONLY_IMAGES:				if ($type == "image/gif" || $type == "image/jpeg" || $type == "image/pjpeg" ||					$type == "image/png" || $type == "image/x-png")					return true;								break;							case self::ONLY_DOCS:				if ($type == "application/pdf" || $type == "application/msword")					return true;								break;		}				return false;	}		static function get_date_string($subfolder = '')	{		return $subfolder . '/' . date('Y/m/d') . '/';	}}